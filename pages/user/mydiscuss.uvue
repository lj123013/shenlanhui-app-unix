<template>
	<cl-page>
		<cl-topbar fixed safe-area-top :title="title" color="black" :pt="{className:'pr-3'}">
		</cl-topbar>
		<cl-list-view ref="listViewRef" :data="listView" :virtual="false" :pt="{
			refresher: {
				className: 'pt-3'
			}
		}" :refresher-enabled="false" @pull="onPull" @bottom="loadMore">
			<template #item="{ value, index }">
				<circle-item :value="value" :typeTitle="title"  :index="index" :showshare="false" @item-click="onItemClick"
					@delete-item="handleDeleteItem"></circle-item>
			</template>
			<template #bottom>
				<view class="py-3">
					<cl-loadmore :loading="loading" :finish="finished" v-if="list.length > 0"></cl-loadmore>
				</view>
			</template>
		</cl-list-view>
	</cl-page>
</template>

<script setup>
	import { isMp, isNull, router, useRefs, usePager, type Response, parse } from "@/cool";
	import { useUi } from "@/uni_modules/cool-ui";
	import { t } from "@/locale";
	import newsItem from "@/components/news-item.uvue"
	import GoodsItem from "../homePage/components/goods-item.uvue";
	import circleItem from "@/components/circle-item.uvue"
	import { postMylist } from "@/cool/service/list"
	const ui = useUi();
	const title = ref("")
	onMounted(() => {
		const params = router.params();
		title.value = params.title as string
		console.log(title.value)
	})
	const listViewRef = ref<ClListViewComponentPublicInstance | null>(null);
	let id = 0;

	const { refresh, list, listView, loading, loadMore, finished } = usePager((params, { render }) => {
		console.log(title.value)
		let type = ""
		if (title.value == '长文') {
			type = 'article'
		} else if (title.value == '讨论') {
			type = "discussion"
		} else if (title.value == '图库') {
			type = "image"
		} else {
			type = "all"
		}
		// 模拟请求
		postMylist({
			page: params["page"],
			limit: params["size"],
			status: title.value == '草稿' ? "draft" : "published",
			type: type
		}).then(res => {
			ui.hideLoading();
			const result = parse<UTSJSONObject>(res)!
			const page = result.pagination
			console.log('数据列表', result.items)
			if (!isNull(page)) {
				const pageDta = parse<UTSJSONObject>(page as Any)!
				render({
					list: result.items,
					pagination: {
						page: params["page"],
						size: params["size"],
						total: pageDta.total

					}

				});
			}
		}).catch(err => {
			ui.hideLoading()
			ui.showToast({
				message: (err as Response).message!,
			});
		})
	});
	async function onPull() {
		await refresh({ page: 1 });
		listViewRef.value!.stopRefresh();
	}
	const onItemClick = (item : UTSJSONObject) => {
		console.log('点击文章项:', item);
		router.push({
			path: '/pages/articlePage/articleDetail',
			params: {
				articleId: item.id,
			}
		});
	};
	// 点击取消关注
	const handleDeleteItem = (itemInfo : UTSJSONObject) => {
		const index = list.value.findIndex((item) => item.id === itemInfo.id);
		if (index !== -1) {
			list.value.splice(index, 1);
		}
	}
	onReady(() => {
		const params = router.params();
		title.value = params.title as string
		ui.showLoading(t("加载中"));

		// 默认请求
		refresh({});
	});
</script>

<style lang="scss">

</style>