<template>
	<cl-page>
		<view class="px-5">
			<cl-form :pt="{
				className: 'p-2 pb-0'
			}" :model="formData" ref="formRef" :rules="rules" :disabled="saving" label-position="top">
				<cl-form-item :label="t('个人认证类别')" prop="type" required>
					<view class='flex flex-row justify-between items-center area' @click="typevisible = !typevisible">
						<cl-text color="#a3a3a3">{{typeText}}</cl-text>
						<cl-icon name="arrow-down-s-line" color="#a3a3a3"></cl-icon>
					</view>
				</cl-form-item>
				<cl-form-item :label="t('个人认证身份')" prop="realname" required>
					<cl-input v-model="formData.realname" :placeholder="t('请输入个人认证身份')" clearable></cl-input>
				</cl-form-item>
				<cl-form-item :label="t('所在单位全称')" prop="full_name">
					<cl-input v-model="formData.full_name" :placeholder="t('请输入所在单位全称')"></cl-input>
				</cl-form-item>
				<cl-form-item :label="t('所在单位简称')" prop="manage_name" required>
					<cl-input v-model="formData.manage_name" :placeholder="t('请输入所在单位简称')" clearable></cl-input>
				</cl-form-item>
				<cl-form-item :label="t('常驻城市')" prop="city">
					<cl-input v-model="formData.city" :placeholder="t('请输入常驻城市')"></cl-input>
				</cl-form-item>
				<cl-form-item :label="t('擅长领域（可多选）')" prop="area">
					<view class='flex flex-row justify-between items-center area' @click="areasvisible = !areasvisible">
						<cl-text color="#a3a3a3">请选择擅长领域</cl-text>
						<cl-icon name="arrow-down-s-line" color="#a3a3a3"></cl-icon>
					</view>
				</cl-form-item>
				<cl-form-item :label="t('个人简介')" prop="description" required>
					<cl-textarea v-model="formData.description" :showWordLimit="false"
						:placeholder="t('请输入个人简介')"></cl-textarea>
				</cl-form-item>
				<cl-form-item :label="t('工作证明文件（如：工作证等）')" prop="files" required>
					<cl-upload v-model="formData.files" icon="a-zu272" iconWidth="80rpx" text="工作证明文件" width="100%"
						height="150px"></cl-upload>
				</cl-form-item>
				<cl-form-item :label="t('其他证明')" prop="links">
					<cl-input v-model="formData.links" :placeholder="t('请输入其他证明:例如:http')"></cl-input>
				</cl-form-item>
			</cl-form>
		</view>
		<cl-footer :pt="{ className: 'pb-10' }">
			<cl-button type="info" @click="toPathResult">认证结果</cl-button>
			<cl-button type="primary" :loading="saving" rounded :pt="{ className: 'flex-1 py-4' }" @click="submit">{{
				t("提交") }}</cl-button>
		</cl-footer>
		<cl-popup v-model="areasvisible" title="请选择擅长领域">
			<view class="p-4">
				<!-- <view class="flex flex-row flex-wrap">
					<view class="mr-[34rpx] mb-[34rpx]" v-for="(item,index) in concartList" :key="index">
						<view class="item rounded-[10rpx] p-2 flex flex-col items-center justify-center">
							<cl-text>{{ item.name }}</cl-text>
						</view>
					</view>
				</view> -->
				<view class="flex flex-row p-1">
					<cl-button size="large" text border type="light" :pt="{
						className: 'flex-1 !rounded-xl h-[80rpx]'
					}" @tap="close">取消选择</cl-button>
					<cl-button size="large" :pt="{
						className: 'flex-1 !rounded-xl h-[80rpx]'
					}" @tap="confirm">确认选择</cl-button>
				</view>
			</view>
		</cl-popup>
		<cl-popup v-model="typevisible" title="请选择个人认证类别">
			<view class="p-4">
				<view v-for="item in genderOptions">
					<cl-text class="text-lg font-bold mb-2">{{ item.label }}</cl-text>
					<view class="flex flex-row flex-wrap mb-4">
						<view class="py-1 px-3 my-2 mr-4 rounded-[10rpx]"
							:class="value.ischecked ? 'bg-primary-500' : 'bg-custom-bg-gray'"
							@click="handlechild(item,value)" v-for="value in item.childredn">
							<cl-text
								:pt="{ className: value.ischecked ? 'text-white text-sm' : 'text-sm text-gray-600' }">{{ value.label }}</cl-text>
						</view>
					</view>
				</view>
				<view class="flex flex-row p-1">
					<cl-button size="large" text border type="light" :pt="{
						className: 'flex-1 !rounded-xl h-[80rpx]'
					}" @tap="typevisible=false">取消选择</cl-button>
					<cl-button size="large" :pt="{
						className: 'flex-1 !rounded-xl h-[80rpx]'
					}" @tap="confirmtype">确认选择</cl-button>
				</view>
			</view>
		</cl-popup>
	</cl-page>
</template>

<script setup>
	import { ref, type Ref } from "vue";
	import {
		useCascader,
		useForm,
		useUi,
		type ClFormRule,
		type ClSelectOption
	} from "@/uni_modules/cool-ui";
	import pca from "@/data/pca.json";
	import { t } from "@/locale";
	import { dayUts, router,isArray } from "@/cool";
	const ui = useUi();
	const { formRef, validate, clearValidate } = useForm();
	const areasvisible = ref(false)


	// 擅长领域
	type arearOption = {
		label : string;
		title : string;
	}

	const concartList = ref<arearOption[]>([])
	// 选择类别
	const typevisible = ref(true)
	const typeText = ref("请选择认证类别")
	type childrednItem = {
		label : string;
		value : string;
		ischecked : boolean
	}
	type typeData = {
		label : string;
		childredn ?: childrednItem[]
	}
	const genderOptions = ref<typeData[]>([
		{
			label: t("媒体"),
			childredn: [
				{ label: t("主持人"), value: "individual_host", ischecked: false },
				{ label: t("主播"), value: "individual_anchor", ischecked: false },
				{ label: t("专栏作家"), value: "individual_expert", ischecked: false },
				{ label: t("新媒体创始人"), value: "individual_media_founder", ischecked: false },
				{ label: t("媒体经营者"), value: "individual_media_operator", ischecked: false },
				{ label: t("媒体管理者"), value: "individual_media_manager", ischecked: false },
				{ label: t("新媒体编辑"), value: "individual_media_editor", ischecked: false },
				{ label: t("记者"), value: "individual_reporter", ischecked: false },
				{ label: t("其他媒体"), value: "individual_media_other", ischecked: false }
			]
		},
		{
			label: t("专家"),
			childredn: [
				{ label: t("公司管理者"), value: "individual_company_manager", ischecked: false },
				{ label: t("公司创始人"), value: "individual_company_founder", ischecked: false },
				{ label: t("经济学家"), value: "individual_economist", ischecked: false },
				{ label: t("券商研究员"), value: "individual_securities_researcher", ischecked: false },
				{ label: t("媒体专家"), value: "individual_media_expert", ischecked: false },
				{ label: t("品牌顾问"), value: "individual_brand_consultant", ischecked: false },
				{ label: t("投资家"), value: "individual_investor", ischecked: false },
				{ label: t("基金经理"), value: "individual_fund_manager", ischecked: false },
				{ label: t("研究学者"), value: "individual_researcher", ischecked: false },
				{ label: t("其他专家"), value: "individual_expert_other", ischecked: false }
			]
		},
	])
	// 自定义表单数据类型
	type FormData = {
		type : number;
		realname : string;
		full_name : string;
		manage_name : string;
		city : string;
		area : arearOption[]
		description : string;
		files : string;
		links : string;
	};

	// 表单数据
	const formData = ref<FormData>({
		type: 0,
		realname: '',
		full_name: "",
		city: "",
		description: "",
		area: [],
		manage_name: "",
		files: "",
		links: ''
	}) as Ref<FormData>;

	// 表单验证规则
	const rules = new Map<string, ClFormRule[]>([
		["type", [ // 每个键值对用 [key, value] 包裹
			{ required: true, message: t("认证类别不能为空") }
		]], // 多个键值对之间用逗号分隔
		["full_name", [
			{ required: true, message: t("组织全称不能为空") }
		]],
		["files", [
			{ required: true, message: t("营业执照不能为空") }
		]],
		["description", [ // 补充：form 中 "description" 字段必填，需添加验证规则
			{ required: true, message: t("组织简介不能为空") }
		]]
	]);
	
	
	// 选择个人类别弹框
	const confirmtype = () => {
		let selectedItems: string[] = [];
		if(isArray(genderOptions.value)&&genderOptions.value.length>0){
			genderOptions.value
		}
		return
		genderOptions.value.forEach(item => {
			item.childredn?.forEach(child => {
				if (child.ischecked) {
					selectedItems.push(child.label);
				}
			});
		});
		if (selectedItems.length === 0) {
			typeText.value = "请选择认证类别";
		} else if (selectedItems.length <= 3) {
			typeText.value = selectedItems.join(",");
		} else {
			const firstThree = selectedItems.slice(0, 3);
			typeText.value = firstThree.join(",") + "等";
		}
		typevisible.value = false;
	};
	// 是否保存中
	const saving = ref(false);
	const close = () => { }
	const confirm = () => { }
	// 提交表单
	function submit() {
		validate((valid, errors) => {
			if (valid) {
				saving.value = true;
				setTimeout(() => {
					ui.showToast({
						message: t("提交成功"),
						icon: "check-line"
					});

					saving.value = false;
					// reset();
				}, 2000);
			} else {
				ui.showToast({
					message: errors[0].message
				});
			}
		});
	}
	const toPathResult = () => {
		router.push({
			path: '/pages/user/authResult',
			params: {
				title: '提交',
			}
		})
	}
</script>

<style lang="scss">
	.area {
		border: 2rpx solid #e5e5e5;
		padding: 14rpx 16rpx;
		border-radius: 14rpx
	}
</style>