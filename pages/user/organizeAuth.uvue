<template>
	<cl-page>
		<view class="px-5">
			<cl-form :pt="{
					className: 'p-2 pb-0'
				}" v-model="formData" ref="formRef" :rules="rules" :disabled="saving" label-position="top">
				<cl-form-item :label="t('组织认证类别')" prop="verification_category" required>
					<cl-select v-model="formData.verification_category" :options="options"
						placeholder="请选择组织认证类别"></cl-select>
				</cl-form-item>
				<cl-form-item :label="t('认证显示标题')" prop="display_title" required>
					<cl-input v-model="formData.display_title" :placeholder="t('例如：深蓝财经官方账号')" clearable></cl-input>
				</cl-form-item>
				<cl-form-item :label="t('组织联系真实姓名')" prop="real_name" required>
					<cl-input v-model="formData.real_name" :placeholder="t('请输入组织联系真实姓名')" clearable></cl-input>
				</cl-form-item>
				<cl-form-item :label="t('认证描述（为何申请认证')" prop="description" required>
					<cl-input v-model="formData.description" :placeholder="t('请输入认证描述')" clearable></cl-input>
				</cl-form-item>
				<cl-form-item :label="t('组织全称')" prop="full_name">
					<cl-input v-model="formData.organization_full_name" :placeholder="t('请输入组织全称')"
						clearable></cl-input>
				</cl-form-item>
				<cl-form-item :label="t('组织简称')" prop="organization_short_name">
					<cl-input v-model="formData.organization_short_name" :placeholder="t('请输入组织简称')"></cl-input>
				</cl-form-item>
				<cl-form-item :label="t('账号管理员姓名')" prop="manage_name">
					<cl-input v-model="formData.manage_name" :placeholder="t('请输入账号管理员姓名')" clearable></cl-input>
				</cl-form-item>
				<cl-form-item :label="t('账号管理员职位')" prop="manager_position">
					<cl-input v-model="formData.manager_position" :placeholder="t('请输入账号管理员职位')" clearable></cl-input>
				</cl-form-item>
				<cl-form-item :label="t('常驻城市')" prop="organization_city">
					<cl-input v-model="formData.organization_city" :placeholder="t('请输入常驻城市')"></cl-input>
				</cl-form-item>
				<cl-form-item :label="t('擅长领域（可多选）')" prop="organization_areas">
					<view class='flex flex-row justify-between items-center area' @click="areasvisible=!areasvisible">
						<cl-text color="#a3a3a3">请选择擅长领域</cl-text>
						<cl-icon name="arrow-down-s-line" color="#a3a3a3"></cl-icon>
					</view>
				</cl-form-item>
				<cl-form-item :label="t('组织简介')" prop="organization_intro">
					<cl-textarea v-model="formData.organization_intro" :showWordLimit="false"
						:placeholder="t('请输入组织简介')"></cl-textarea>
				</cl-form-item>
				<cl-form-item :label="t('营业执照或组织机构')" prop="business_license">
					<view v-if="formData.business_license==''" @tap="uploadImg('business_license')" icon="a-zu272"
						iconWidth="40rpx"
						class="bg-neutral-100 rounded-xl h-[150px] flex flex-col justify-center items-center">
						<cl-icon name="a-zu272" :size="50" width="80rpx" color="#a3a3a3"></cl-icon>
						<cl-text color="#a3a3a3" :pt="{className:'text-sm mt-1'}">单位授权证明</cl-text>
					</view>
					<cl-image v-if="formData.business_license!=''" :pt="{
							className: '',
							inner: {
								className: '!rounded-xl'
							}
						}" width="100%" height="150px" :src="formData.business_license">

					</cl-image>
				</cl-form-item>
				<cl-form-item :label="t('单位授权证明')" prop="authorization_letter">
					<view v-if="formData.authorization_letter==''" @tap="uploadImg('authorization_letter')"
						icon="a-zu272" iconWidth="40rpx"
						class="bg-neutral-100 rounded-xl h-[150px] flex flex-col justify-center items-center">
						<cl-icon name="a-zu272" :size="50" width="80rpx" color="#a3a3a3"></cl-icon>
						<cl-text color="#a3a3a3" :pt="{className:'text-sm mt-1'}">单位授权证明</cl-text>
					</view>
					<cl-image v-if="formData.authorization_letter!=''" :pt="{
							className: '',
							inner: {
								className: '!rounded-xl'
							}
						}" width="100%" height="150px" :src="formData.authorization_letter">

					</cl-image>
				</cl-form-item>

				<cl-form-item :label="t('账号管理员身份证')" prop="manager_id_card">
					<view v-if="formData.manager_id_card==''" @tap="uploadImg('manager_id_card')" icon="a-zu272"
						iconWidth="40rpx"
						class="bg-neutral-100 rounded-xl h-[150px] flex flex-col justify-center items-center">
						<cl-icon name="a-zu272" :size="50" width="80rpx" color="#a3a3a3"></cl-icon>
						<cl-text color="#a3a3a3" :pt="{className:'text-sm mt-1'}">账号管理员身份证</cl-text>
					</view>
					<cl-image v-if="formData.manager_id_card!=''" :pt="{
							className: '',
							inner: {
								className: '!rounded-xl'
							}
						}" width="100%" height="150px" :src="formData.manager_id_card">

					</cl-image>
				</cl-form-item>
			</cl-form>
		</view>
		<cl-footer :pt="{className:'pb-10'}">
			<cl-button type="primary" :loading="saving" rounded :pt="{ className: 'flex-1 py-4' }"
				@click="submit">{{ t("提交") }}</cl-button>
		</cl-footer>
		<cl-popup v-model="areasvisible" title="请选择擅长领域">
			<view class="p-4">
				<!-- <view class="flex flex-row flex-wrap">
					<view class="mr-[34rpx] mb-[34rpx]" v-for="(item,index) in concartList" :key="index">
						<view class="item rounded-[10rpx] p-2 flex flex-col items-center justify-center">
							<cl-text>{{ item.name }}</cl-text>
						</view>
					</view>
				</view> -->
				<view class="flex flex-row p-1">
					<cl-button size="large" text border type="light" :pt="{
							className: 'flex-1 !rounded-xl h-[80rpx]'
						}" @tap="close">取消选择</cl-button>
					<cl-button size="large" :pt="{
							className: 'flex-1 !rounded-xl h-[80rpx]'
						}" @tap="confirm">确认选择</cl-button>
				</view>
			</view>
		</cl-popup>
	</cl-page>
</template>

<script setup>
	import { ref, type Ref } from "vue";
	import {
		useCascader,
		useForm,
		useUi,
		type ClFormRule,
		type ClSelectOption,

	} from "@/uni_modules/cool-ui";
	import pca from "@/data/pca.json";
	import { t } from "@/locale";
	import { type Response, parse, isArray, router, uploadFile, isNull } from "@/cool";
	import { getareas, verification } from '@/cool/service/user'
	const ui = useUi();
	const { formRef, validate, clearValidate } = useForm();
	const areasvisible = ref(false)
	// 定义单个选项项的类型
	interface OptionItem {
		label : string;
		value : string;
	}
	// 定义分类的类型
	interface CategoryGroup {
		category : string;
		items : OptionItem[];
	}
	// 接口返回数据的完整类型
	const concartList = ref<CategoryGroup[]>([])
	const options = ref<ClSelectOption[]>([
		{
			label: t("企业认证"),
			value: "organization_enterprise",
		},
		{
			label: t("政府认证"),
			value: "organization_government",
		},
		{
			label: t("媒体认证"),
			value: "organization_media",
		}
	]);
	// 自定义表单数据类型
	type FormData = {
		verification_type : string;//认证方式（必填）
		verification_category : string | number | null;//认证类型（必填）
		organization_short_name : string;//组织简称
		organization_full_name : string;//组织全称
		real_name : string;//组织联系人真实姓名（必填）
		organization_intro : string;//组织简介
		organization_city : string;//组织所在城市
		organization_areas : string[];//擅长领域
		description : string;//认证描述（为何申请认证）（必填）
		display_title : string;//认证显示标题（必填）
		business_license : string;//营业执照url
		authorization_letter : string;//授权书
		manager_id_card : string;//身份证号
		manage_name : string;//负责人姓名
		manager_position : string;//职位
	};

	// 表单数据
	const formData = ref<FormData>({
		verification_type: "organization",
		verification_category: "organization_enterprise",
		organization_full_name: "",
		organization_short_name: "",
		real_name: "涂进军",
		organization_intro: "",
		organization_city: "",
		organization_areas: [],
		description: "发表文章",
		display_title: "深蓝财经官方账号",
		business_license: "",
		authorization_letter: "",
		manager_id_card: "",
		manage_name: "",
		manager_position: "",
	}) as Ref<FormData>;

	// 表单验证规则
	const rules = new Map<string, ClFormRule[]>([
		["verification_category", [{ required: true, message: t("认证类别不能为空") }]], // 多个键值对之间用逗号分隔
		[
			"real_name",
			[
				{ required: true, message: t("组织联系人不能为空") },
			]
		],
		[
			"display_title",
			[
				{ required: true, message: t("认证显示标题不能为空") },
			]
		],
		[
			"description",
			[
				{ required: true, message: t("用户名不能为空") },

			]
		],

	]);
	// 是否保存中
	const saving = ref(false);
	const close = () => { }
	const confirm = () => { }
	// 上传图片
	const uploadImg = (field : string) => {
		// 在函数体内设置默认值
		const actualUploadType = "verification";
		function next(path : string) {
			const file : ChooseImageTempFile = {
				path: path,
				size: 0, // 如果您能获取到文件大小，可以在这里设置
				name: "file", // 使用路径中的文件名
				type: "image/png" // 根据实际文件类型设置，这里只是示例
			};
			uploadFile(file, { type: actualUploadType }, actualUploadType).then((res) => {
				console.log('上传成功结果', res)
				ui.showToast({
					message: t("图片上传成功"),
					type: "success",
				});
				// 根据字段名更新对应的表单字段
				formData.value[field] = res;//营业执照或组织机构
			})
				.catch((err) => {
					console.log('上传失败结果', err)
					ui.showToast({
						message: t("图片上传失败"),
						type: "error",
					});
				});
		}
		// #ifndef MP-WEIXIN
		console.log('非微信小程序环境，调用 chooseImage');
		uni.chooseImage({
			count: 1,
			success(res) {
				console.log('选择图片成功:', res);
				if (isArray(res.tempFiles) && res.tempFiles.length > 0) {
					if (!isNull(res.tempFiles[0].path))
						next(res.tempFiles[0].path);
				} else {
					console.log('未找到临时文件路径');
					ui.showToast({
						message: "未找到文件路径"
					});
				}
			},
			fail(err) {
				console.log('选择图片失败:', err);
				ui.showToast({
					message: "选择图片失败"
				});
			}
		});
		// #endif
	}

	// 提交表单
	function submit() {
		validate((valid, errors) => {
			if (valid) {
				saving.value = true;
				// 正确传递表单数据给 verification 函数
				verification(formData.value).then(res => {
					ui.showToast({
						message: t("提交成功"),
						icon: "check-line"
					});
					router.push({
						path: '/pages/user/authResult',
						params: {
							title: '提交',
						}
					})
					saving.value = false;
					// reset();
				}).catch((err) => {
					ui.showToast({
						message: (err as Response).message!
					});
					saving.value = false;
				})
			} else {
				ui.showToast({
					message: errors[0].message
				});
			}
		});
	}
	onMounted(() => {
		// getareas({}).then((res : any) => {
		// 	let data : CategoryGroup[] = []
		// 	if (isArray(res))
		// 		console.log(isArray(res))
		// 		 data = res
		// 		 console.log(data)
		// 	// concartList.value = res as CategoryGroup 

		// }).catch((err) => {
		// 	ui.showToast({
		// 		message: t("擅长领域获取失败")
		// 	});
		// })
	})
</script>

<style lang="scss">
	.area {
		border: 2rpx solid #e5e5e5;
		padding: 14rpx 16rpx;
		border-radius: 14rpx
	}
</style>