<template>
	<cl-page>
		<view class="px-5">
			<cl-form :pt="{
				className: 'p-2 pb-0'
			}" v-model="formData" ref="formRef" :rules="rules" :disabled="saving" label-position="top">
				<cl-form-item :label="t('组织认证类别')" prop="verification_category" required>
					<cl-select v-model="formData.verification_category" :options="options"
						placeholder="请选择组织认证类别"></cl-select>
				</cl-form-item>
				<cl-form-item :label="t('认证显示标题')" prop="display_title" required>
					<cl-input v-model="formData.display_title" :placeholder="t('例如：深蓝财经官方账号')" clearable></cl-input>
				</cl-form-item>
				<cl-form-item :label="t('组织联系真实姓名')" prop="real_name" required>
					<cl-input v-model="formData.real_name" :placeholder="t('请输入组织联系真实姓名')" clearable></cl-input>
				</cl-form-item>
				<cl-form-item :label="t('认证描述（为何申请认证')" prop="description" required>
					<cl-input v-model="formData.description" :placeholder="t('请输入认证描述')" clearable></cl-input>
				</cl-form-item>
				<cl-form-item :label="t('组织全称')" prop="full_name">
					<cl-input v-model="formData.organization_full_name" :placeholder="t('请输入组织全称')"
						clearable></cl-input>
				</cl-form-item>
				<cl-form-item :label="t('组织简称')" prop="organization_short_name">
					<cl-input v-model="formData.organization_short_name" :placeholder="t('请输入组织简称')"></cl-input>
				</cl-form-item>
				<cl-form-item :label="t('账号管理员姓名')" prop="manage_name">
					<cl-input v-model="formData.manage_name" :placeholder="t('请输入账号管理员姓名')" clearable></cl-input>
				</cl-form-item>
				<cl-form-item :label="t('账号管理员职位')" prop="manager_position">
					<cl-input v-model="formData.manager_position" :placeholder="t('请输入账号管理员职位')" clearable></cl-input>
				</cl-form-item>
				<cl-form-item :label="t('常驻城市')" prop="organization_city">
					<cl-input v-model="formData.organization_city" :placeholder="t('请输入常驻城市')"></cl-input>
				</cl-form-item>
				<cl-form-item :label="t('擅长领域（可多选）')" prop="organization_areas">
					<view class='flex flex-row justify-between items-center area' @click="areasvisible = !areasvisible">
						<cl-text color="#a3a3a3">{{arearText}}</cl-text>
						<cl-icon name="arrow-down-s-line" color="#a3a3a3"></cl-icon>
					</view>
				</cl-form-item>
				<cl-form-item :label="t('组织简介')" prop="organization_intro">
					<cl-textarea v-model="formData.organization_intro" :showWordLimit="false"
						:placeholder="t('请输入组织简介')"></cl-textarea>
				</cl-form-item>
				<cl-form-item :label="t('营业执照或组织机构')" prop="business_license">
					<view v-if="formData.business_license == ''" @tap="uploadImg('business_license')" icon="a-zu272"
						iconWidth="40rpx"
						class="bg-neutral-100 rounded-xl h-[150px] flex flex-col justify-center items-center">
						<cl-icon name="a-zu272" :size="50" width="80rpx" color="#a3a3a3"></cl-icon>
						<cl-text color="#a3a3a3" :pt="{ className: 'text-sm mt-1' }">单位授权证明</cl-text>
					</view>
					<cl-image v-if="formData.business_license != ''" :pt="{
						className: '',
						inner: {
							className: '!rounded-xl'
						}
					}" width="100%" height="150px" :src="formData.business_license">

					</cl-image>
				</cl-form-item>
				<cl-form-item :label="t('单位授权证明')" prop="authorization_letter">
					<view v-if="formData.authorization_letter == ''" @tap="uploadImg('authorization_letter')"
						icon="a-zu272" iconWidth="40rpx"
						class="bg-neutral-100 rounded-xl h-[150px] flex flex-col justify-center items-center">
						<cl-icon name="a-zu272" :size="50" width="80rpx" color="#a3a3a3"></cl-icon>
						<cl-text color="#a3a3a3" :pt="{ className: 'text-sm mt-1' }">单位授权证明</cl-text>
					</view>
					<cl-image v-if="formData.authorization_letter != ''" :pt="{
						className: '',
						inner: {
							className: '!rounded-xl'
						}
					}" width="100%" height="150px" :src="formData.authorization_letter">

					</cl-image>
				</cl-form-item>

				<cl-form-item :label="t('账号管理员身份证')" prop="manager_id_card">
					<view v-if="formData.manager_id_card == ''" @tap="uploadImg('manager_id_card')" icon="a-zu272"
						iconWidth="40rpx"
						class="bg-neutral-100 rounded-xl h-[150px] flex flex-col justify-center items-center">
						<cl-icon name="a-zu272" :size="50" width="80rpx" color="#a3a3a3"></cl-icon>
						<cl-text color="#a3a3a3" :pt="{ className: 'text-sm mt-1' }">账号管理员身份证</cl-text>
					</view>
					<cl-image v-if="formData.manager_id_card != ''" :pt="{
						className: '',
						inner: {
							className: '!rounded-xl'
						}
					}" width="100%" height="150px" :src="formData.manager_id_card">

					</cl-image>
				</cl-form-item>
			</cl-form>
		</view>
		<cl-footer :pt="{ className: 'pb-10' }">
			<cl-button type="primary" :loading="saving" rounded :pt="{ className: 'flex-1 py-4' }" @click="submit">{{
				t("提交") }}</cl-button>
		</cl-footer>
		<!-- 擅长领域 -->
		<cl-popup v-model="areasvisible" title="请选择擅长领域">
			<view class="p-4 h-[90vh]">
				<view class="">
					<view v-for="(item, index) in concartList">
						<view class="flex flex-row justify-between items-center py-2"
							@click="openChildren(item, index)">
							<cl-text>{{ item?.category }}</cl-text>
							<cl-icon v-if="item?.isOpen == false" name="arrow-down-s-line" color="#c1c1c1"></cl-icon>
							<cl-icon v-if="item?.isOpen" name="arrow-up-s-line" color="#c1c1c1"></cl-icon>
						</view>
						<view class="flex flex-row flex-wrap" v-if="item?.isOpen">
							<view class="py-1 px-3 my-2 mr-4 rounded-[10rpx]" v-for="child in item?.items"
								:class="child.ischecked ? 'bg-primary-500' : 'bg-custom-bg-gray'"
								@click="child.ischecked = !child.ischecked">
								<cl-text
									:pt="{ className: child.ischecked ? 'text-white text-sm' : 'text-sm text-gray-600' }">{{
										child?.label }}</cl-text>
							</view>
						</view>
					</view>
				</view>
				<view class="flex flex-row p-1">
					<cl-button size="large" text border type="light" :pt="{
						className: 'flex-1 !rounded-xl h-[80rpx]'
					}" @tap="areasvisible=false">取消选择</cl-button>
					<cl-button size="large" :pt="{
						className: 'flex-1 !rounded-xl h-[80rpx]'
					}" @tap="confirm">确认选择</cl-button>
				</view>
			</view>
		</cl-popup>
	</cl-page>
</template>

<script setup>
	import { ref, type Ref, watch } from "vue";
	import {
		useCascader,
		useForm,
		useUi,
		type ClFormRule,
		type ClSelectOption,

	} from "@/uni_modules/cool-ui";
	import pca from "@/data/pca.json";
	import { t } from "@/locale";
	import { type Response, parse, isArray, router, uploadFile, isNull, map, parseObject, parseClass } from "@/cool";
	import { getareas, verification } from '@/cool/service/user'
	const ui = useUi();
	const { formRef, validate, clearValidate } = useForm();
	const areasvisible = ref(false)
	const arearText = ref("选择擅长领域")
	const options = ref<ClSelectOption[]>([
		{
			label: t("企业认证"),
			value: "organization_enterprise",
		},
		{
			label: t("政府认证"),
			value: "organization_government",
		},
		{
			label: t("媒体认证"),
			value: "organization_media",
		}
	]);
	// 定义数据类型（注释形式）
	// 首先定义子项类型
	type FinanceSubItem = {
		label : string
		value : string
		ischecked : boolean
	}
	type DisplayItem = {
		isOpen : boolean
		category : string
		items : FinanceSubItem[]
	}
	// 在组件中使用
	const concartList = ref<DisplayItem[]>([])
	// 自定义表单数据类型
	type FormData = {
		verification_type : string;//认证方式（必填）
		verification_category : string | number | null;//认证类型（必填）
		organization_short_name : string;//组织简称
		organization_full_name : string;//组织全称
		real_name : string;//组织联系人真实姓名（必填）
		organization_intro : string;//组织简介
		organization_city : string;//组织所在城市
		organization_areas : string[];//擅长领域
		description : string;//认证描述（为何申请认证）（必填）
		display_title : string;//认证显示标题（必填）
		business_license : string;//营业执照url
		authorization_letter : string;//授权书
		manager_id_card : string;//身份证号
		manage_name : string;//负责人姓名
		manager_position : string;//职位
	};

	// 表单数据
	const formData = ref<FormData>({
		verification_type: "organization",
		verification_category: "organization_enterprise",
		organization_full_name: "",
		organization_short_name: "",
		real_name: "涂进军",
		organization_intro: "",
		organization_city: "",
		organization_areas: [],
		description: "发表文章",
		display_title: "深蓝财经官方账号",
		business_license: "",
		authorization_letter: "",
		manager_id_card: "",
		manage_name: "",
		manager_position: "",
	}) as Ref<FormData>;

	// 表单验证规则
	const rules = new Map<string, ClFormRule[]>([
		["verification_category", [{ required: true, message: t("认证类别不能为空") }]], // 多个键值对之间用逗号分隔
		[
			"real_name",
			[
				{ required: true, message: t("组织联系人不能为空") },
			]
		],
		[
			"display_title",
			[
				{ required: true, message: t("认证显示标题不能为空") },
			]
		],
		[
			"description",
			[
				{ required: true, message: t("用户名不能为空") },

			]
		],

	]);
	// 是否保存中
	const saving = ref(false);

	// 获取擅长领域
	const areasDta = () => {
		// 获取擅长领域
		getareas({}).then((res : any) => {
			// console.log('原始数据:', res)
			if (Array.isArray(res)) {
				const data : DisplayItem[] = []
				for (let i = 0; i < res.length; i++) {
					const item = res[i]
					if (!(item instanceof UTSJSONObject)) continue
					const categoryValue = item.getString('category') != null ? item.getString('category')! : ""
					const itemsArray : FinanceSubItem[] = []
					const subItems = item.getArray('items')
					if (isArray(subItems)) {
						for (let j = 0; j < subItems!!.length; j++) {
							// console.log(subItems!![j], "subItems[j]")
							const subItem = subItems!![j]
							if (!(subItem instanceof UTSJSONObject)) continue
							// 使用显式变量赋值，确保类型正确
							const labelResult = subItem.getString('label')
							const valueResult = subItem.getString('value')
							let labelValue = ""
							let valueValue = ""
							if (labelResult !== null) {
								labelValue = labelResult
							}

							if (valueResult !== null) {
								valueValue = valueResult
							}
							// 创建 FinanceSubItem 对象
							const financeSubItem : FinanceSubItem = {
								label: labelValue,
								value: valueValue,
								ischecked: false
							}

							itemsArray.push(financeSubItem)
						}
					}

					data.push({
						isOpen: false,
						category: categoryValue,
						items: itemsArray
					} as DisplayItem)
				}

				concartList.value = data
				// console.log('使用 UTSJSONObject 方法转换成功', concartList.value, "concartList.value")
			}
		}).catch((err) => {
			ui.showToast({
				message: t("擅长领域获取失败")
			});
		})
	}
	// 确认选择擅长领域
	const confirm = () => {
		if (isArray(concartList.value) && concartList.value!!.length > 0) {
			let allSelectedItems : string[] = []  // 用于收集所有选中的项目
			for (let i = 0; i < concartList.value.length; i++) {
				const category = concartList.value[i]
				if (category != null && isArray(category?.items) && category.items.length > 0) {
					const subItems = category.items
					// console.log("subItems", subItems)
					if (isArray(subItems) && subItems.length > 0) {
						for (let j = 0; j < subItems!!.length; j++) {
							const subItem = subItems!![j]
							if (subItem.ischecked == true) {
								formData.value.organization_areas.push(subItem.value)
								allSelectedItems.push(subItem.label)
							}

						}
					}

				}
			}
			if (isArray(allSelectedItems) && allSelectedItems.length > 0) {
				if (allSelectedItems.length <= 3) {
					// 如果不超过3个，显示全部
					arearText.value = allSelectedItems.join(",")
				} else {
					// 如果超过3个，显示前3个并添加"等"字
					const firstThree = allSelectedItems.slice(0, 3)
					arearText.value = firstThree.join(",") + "等"
				}
				// arearText.value = allSelectedItems.join(",")
			}
			areasvisible.value = false
			console.log("当前分类选中的项目", parseClass(allSelectedItems))
		}
	}
	// 重置所有选中状态
	const resetAllChecked = () => {
		console.log('弹框关闭，重置所有选中状态')
		if (isArray(concartList.value) && concartList.value!!.length > 0) {
			// if (!concartList.value || !Array.isArray(concartList.value)) return
			// // 遍历所有分类和子项，将 ischecked 设为 false
			const newList = concartList.value.map(category => {
				return {
					...category,
					items: category.items.map(item => {
						return {
							...item,
							ischecked: false
						}
					})
				}
			})
			concartList.value = newList as DisplayItem[]
		}
	}

	// 上传图片
	const uploadImg = (field : string) => {
		// 在函数体内设置默认值
		const actualUploadType = "verification";
		function next(path : string) {
			const file : ChooseImageTempFile = {
				path: path,
				size: 0, // 如果您能获取到文件大小，可以在这里设置
				name: "file", // 使用路径中的文件名
				type: "image/png" // 根据实际文件类型设置，这里只是示例
			};
			uploadFile(file, { type: actualUploadType }, actualUploadType).then((res) => {
				console.log('上传成功结果', res)
				ui.showToast({
					message: t("图片上传成功"),
					type: "success",
				});
				// 根据字段名更新对应的表单字段
				formData.value[field] = res;//营业执照或组织机构
			})
				.catch((err) => {
					console.log('上传失败结果', err)
					ui.showToast({
						message: t("图片上传失败"),
						type: "error",
					});
				});
		}
		// #ifndef MP-WEIXIN
		console.log('非微信小程序环境，调用 chooseImage');
		uni.chooseImage({
			count: 1,
			success(res) {
				console.log('选择图片成功:', res);
				if (isArray(res.tempFiles) && res.tempFiles.length > 0) {
					if (!isNull(res.tempFiles[0].path))
						next(res.tempFiles[0].path);
				} else {
					console.log('未找到临时文件路径');
					ui.showToast({
						message: "未找到文件路径"
					});
				}
			},
			fail(err) {
				console.log('选择图片失败:', err);
				ui.showToast({
					message: "选择图片失败"
				});
			}
		});
		// #endif
	}
	// 打开或关闭子项
	const openChildren = (item : DisplayItem, index : number) => {
		// 如果当前项是展开的，则关闭它
		if (item.isOpen) {
			item.isOpen = false
		} else {
			// 先关闭所有项
			concartList.value.forEach((i) => {
				i.isOpen = false
			})
			// 打开当前项
			item.isOpen = true
		}
	}
	// 提交表单
	function submit() {
		validate((valid, errors) => {
			if (valid) {
				saving.value = true;
				// 正确传递表单数据给 verification 函数
				verification(formData.value).then(res => {
					ui.showToast({
						message: t("提交成功"),
						icon: "check-line"
					});
					router.push({
						path: '/pages/user/authResult',
						params: {
							title: '提交',
						}
					})
					saving.value = false;
					// reset();
				}).catch((err) => {
					ui.showToast({
						message: (err as Response).message!
					});
					saving.value = false;
				})
			} else {
				ui.showToast({
					message: errors[0].message
				});
			}
		});
	}

	/** 监听激活索引变化 */
	watch(areasvisible, (val : boolean) => {
		if (val == false) {
			resetAllChecked()
		} else {
			areasDta()
		}
	});
	onMounted(() => {
		areasDta()
	})
</script>

<style lang="scss">
	.area {
		border: 2rpx solid #e5e5e5;
		padding: 14rpx 16rpx;
		border-radius: 14rpx
	}
</style>