<template>
	<cl-page>
		<view class="p-3">
			<cl-list :pt="{className:'border-bottom'}">
				<cl-list-item :label="t('头像')" hoverable justify="end">
					<cl-avatar :src="userInfo?.avatar" size="44rpx"
						:pt="{ className: '!rounded-3xl', icon: { size: 20 } }" @tap="uploadAvatar">
					</cl-avatar>
				</cl-list-item>
			</cl-list>
			<cl-list :pt="{className:'border-bottom'}">
				<cl-list-item :label="t('昵称')" hoverable arrow justify="end" @tap="router.to('/pages/user/edit-name')">
					<cl-text>{{ userInfo?.nickname }}</cl-text>
				</cl-list-item>
			</cl-list>
			<cl-list :pt="{ className: 'border-bottom' }">
				<cl-list-item :label="t('生日')" hoverable arrow justify="end" @tap="open('birthday')">

					<cl-text color="info" v-if="userInfo?.birthday == null">{{
						t("请选择")
					}}</cl-text>
					<cl-text v-else>{{ userInfo?.birthday }}</cl-text>
				</cl-list-item>
			</cl-list>
			<cl-list :pt="{ className: ' border-bottom ' }">
				<cl-list-item :label="t('性别')" hoverable arrow justify="end" @tap="open('gender')">
					<cl-text>{{ genderText }}</cl-text>
					<cl-text color="info" v-if="userInfo?.gender == null">{{
						t("请选择")
					}}</cl-text>
				</cl-list-item>


			</cl-list>
			<cl-button :pt="{
				className: '!h-[90rpx] !rounded-full mt-5'
			}" @tap="toChange">
				{{ t("保存") }}
			</cl-button>
			<cl-select :title="t('选择性别')" :model-value="userInfo?.gender" :ref="refs.set('gender')"
				:options="genderOptions" :show-trigger="false" @change="onGenderChange"></cl-select>
			<cl-select-date :title="t('选择生日')" :model-value="userInfo?.birthday" :ref="refs.set('birthday')" type="date"
				:end="today" :show-trigger="false" @change="onBirthdayChange"></cl-select-date>

		</view>
	</cl-page>
</template>

<script setup lang="ts">
	import { dayUts, router, upload, useRefs, useStore, type Response, userInfo } from "@/cool";
	import { t } from "@/locale";
	import { useCascader, useUi, type ClSelectOption } from "@/uni_modules/cool-ui";
	import { computed, ref, onMounted } from "vue";
	import pca from "@/data/pca.json";
	import { userStatistics } from '@/cool/service/user'
	const { user } = useStore();
	const ui = useUi();
	const refs = useRefs();

	// 今天
	const today = dayUts().format("YYYY-MM-DD");

	// 性别选项
	const genderOptions = ref<ClSelectOption[]>([
		{
			label: t("保密"),
			value:'unknown'
		},
		{
			label: t("男"),
			value: 'male'
		},
		{
			label: t("女"),
			value: 'female'
		}
	]);
	const genderTextMap = {
		'0': t("保密"),
		'1': t("男"),
		'2': t("女"),
		'unknown': t("保密"),
		'male': t("男"),
		'female': t("女")
	};
	// 性别文本
	const genderText = computed(() => {
		const gender = userInfo.value?.gender;
		const key = gender != null ? gender.toString() : 'unknown';
		const text = genderTextMap[key];
		return text != null ? text : t("保密");
	});
	onMounted(() => {
		console.log(genderText.value);
	})
	// 性别改变
	async function onGenderChange(val : string) {
		try {
		  // updateUser 并等待结果
		  const isSuccess = await user.update({
		    gender: val
		  });
			
		  if (isSuccess) {
		    // 只有请求成功后才显示成功提示
		    ui.showToast({
		      message: t("性别设置成功")
		    });
		  } else {
		    // 如果 update 方法返回 false（可能是验证失败等）
		    ui.showToast({
		      message: t("性别设置失败，请重试"),
		      type: 'error'
		    });
		  }
		} catch (error) {
		  // 捕获异步操作中的错误
		  console.error('性别设置异常:', error);
		  ui.showToast({
		    message: t("性别设置失败，请检查网络连接"),
		    type: 'error'
		  });
		}
	}

	// 生日改变
	async function onBirthdayChange(val: string) {
	  try {
	    // updateUser 并等待结果
	    const isSuccess = await user.update({
	      birthday: val
	    });
	
	    if (isSuccess) {
	      // 只有请求成功后才显示成功提示
	      ui.showToast({
	        message: t("生日设置成功")
	      });
	    } else {
	      // 如果 update 方法返回 false（可能是验证失败等）
	      ui.showToast({
	        message: t("生日设置失败，请重试"),
	        type: 'error'
	      });
	    }
	  } catch (error) {
	    // 捕获异步操作中的错误
	    console.error('生日设置异常:', error);
	    ui.showToast({
	      message: t("生日设置失败，请检查网络连接"),
	      type: 'error'
	    });
	  }
	}
	// 打开弹窗
	function open(name : string) {
		refs.open(name);
	}

	// 上传头像
	function uploadAvatar(e : UniEvent) {
		function next(path : string) {
			console.log(path,'上传头像地址')
			upload(path).then((url) => {
					ui.showToast({
						message: t("头像上传成功")
					});

					user.update({
						avatarUrl: url
					});
				})
				.catch((err) => {
					ui.showToast({
						message: (err as Response).message!
					});
				});
		}

		// #ifdef MP-WEIXIN
		next(e.detail.avatarUrl);
		// #endif

		// #ifndef MP-WEIXIN
		uni.chooseImage({
			count: 1,
			success(res) {
				next(res.tempFiles[0].path);
			}
		});
		// #endif
	}
	// 保存按钮
	function toChange() {

	}
</script>