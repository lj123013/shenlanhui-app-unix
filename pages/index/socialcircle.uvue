<template>
	<cl-page>
		<view >
			<cl-topbar fixed :show-back="false" safe-area-top :pt="{ className: 'px-5' }">
				<template #prepend>
					<view
						class="bg-primary-500 rounded-full w-[60rpx] h-[60rpx] flex flex-col items-center justify-center"
						@click="router.to('/pages/user/my')">
						<cl-icon name="a-zu254" color="white" size="28rpx"></cl-icon>
					</view>
				</template>
				<cl-text color="black" :pt="{ className: '!text-xl fontBold' }">圈子</cl-text>
				<template #append>
					<view
						class="bg-primary-500 rounded-full w-[52rpx] h-[52rpx] flex flex-col items-center justify-center"
						@click="publishVisible=!publishVisible">
						<cl-icon name="jia" color="white" size="30rpx"></cl-icon>
					</view>
				</template>
			</cl-topbar>

			<!-- 搜索框吸顶 -->
			<cl-sticky :offset-top="44+statusBarHeight">
				<view class="bg-white">
					<view class="serach rounded-full bg-gray-50 py-3  mx-3 px-3 flex flex-row items-center"
						@tap="router.to('/pages/homePage/serach')">
						<cl-icon name="a-zu257" color="#CDCDCD" :size="24"></cl-icon>
						<cl-text color="#B7B7B7" class="text-neutral-300 ml-2">请输入你要搜索的内容</cl-text>
					</view>
					<cl-tabs @change="changetag" :pt="{className:'bg-white'}" v-model="current" class="fontBold"
						:showLine="false" :list="tabsList" :color="isColor ? '#2854F2' : ''"
						un-color="#6a6a6a"></cl-tabs>
				</view>
			</cl-sticky>
		</view>
		<!-- 选项卡 -->
		<!-- <view class="flex-1"> -->
		<cl-list-view ref="listViewRef" :data="listView" :virtual="false" :pt="{
							refresher: {
								className: 'pt-3'
							}
						}" :refresher-enabled="true" @pull="onPull" @bottom="loadMore">
			<template #item="{ value ,index}">
				<circle-item :value="value" :index="index" @item-click="onItemClick"></circle-item>
			</template>

			<template #bottom>
				<view class="py-3">
					<cl-loadmore :loading="loading" :finish="finished" v-if="list.length > 0"></cl-loadmore>
				</view>
			</template>
		</cl-list-view>
		<!-- </view> -->



		<!--发文章弹窗 -->
		<cl-popup v-model="publishVisible" :show-header="false" :maskClosable="true">
			<view class="">
				<cl-row :gutter="12" :pt="{className:'py-10'}">
					<cl-col :span="8" v-for="item in discuss" @click="toPath(item)">
						<view class='flex flex-col justify-center items-center'>
							<cl-image :src="item?.img"></cl-image>
							<cl-text>{{item.name}}</cl-text>
						</view>
					</cl-col>
				</cl-row>
				<view class="bg-gray-200 h-[10rpx]"></view>
				<view class="flex flex-col items-center justify-center" @tap="publishVisible = false">
					<cl-text color='#6D6D6D' :pt="{className:' text-lg py-4'}">取消</cl-text>
				</view>
			</view>
		</cl-popup>
		<!-- 自定义底部导航栏 -->
		<Tabbar></Tabbar>
	</cl-page>
</template>
<script setup>
	import { router, usePager, type Response, parse, isNull } from "@/cool";
	import type { ClTabsItem, useUi } from "@/uni_modules/cool-ui";
	import { t } from "@/locale";
	import Tabbar from "@/components/tabbar.uvue";
	import circleItem from "@/components/circle-item.uvue"
	import { postsFollowing, pulishList } from "@/cool/service/list"
	const ui = useUi();
	// 获取设备屏幕信息
	const { screenWidth, statusBarHeight, screenHeight } = uni.getWindowInfo();
	const publishVisible = ref(false)
	const isColor = ref(true)
	const current = ref(0)
	const tabsList = ref<ClTabsItem[]>([
		{
			label: "关注",
			value: 0,
		},
		{
			label: "最新",
			value: 1,
		},
	]);
	
	type discussItem = {
		img : string
		name : string
	}
	const discuss = ref<discussItem[]>([
		{
			img: '/static/image/publish-icon1.png',
			name: '发讨论'
		},
		{
			img: '/static/image/publish-icon2.png',
			name: '发长文'

		},
		{
			img: '/static/image/publish-icon3.png',
			name: '图片'

		}
	])
	const onItemClick = (item : UTSJSONObject) => {
		console.log('点击文章项:', item);
		router.push({
			path: '/pages/articlePage/articleDetail',
			params: {
				articleId: item.id,
				title: '圈子'
			}
		});
	};
	const toPath = (item : discussItem) => {
		router.push({
			path: '/pages/publish/disucss',
			params: {
				title: item.name
			}
		})
		publishVisible.value = false
	}
	const changetag = (value : string | number) => {
		console.log('选中的标签值:', value)
		current.value = value as number
		// refresh({});
	}
	const listViewRef = ref<ClListViewComponentPublicInstance | null>(null);

	let id = 0;

	const { refresh, list, listView, loading, loadMore,finished } = usePager((params, { render }) => {
		// 模拟请求
		if (current.value == 0) {
			postsFollowing({
				page: params["page"],
				limit: params["size"],
			}).then(res => {
				ui.hideLoading();
				const result = parse<UTSJSONObject>(res)!
				const page = result.pagination
				console.log('数据列表',params["page"], result.items)
				if (!isNull(page)) {
					const pageDta = parse<UTSJSONObject>(page as Any)!
					render({
						list: result.items,
						pagination: {
							page: params["page"],
							size: params["size"],
							total: pageDta.total

						}

					});
				}

			}).catch(err => {
				ui.hideLoading()
				ui.showToast({
					message: (err as Response).message!,
				});
			})
		} else {
			console.log(current.value, 2222)
			pulishList({
				page: params["page"],
				limit: params["size"],
				sort: 'hot'
			}).then(res => {
				ui.hideLoading();
				const result = parse<UTSJSONObject>(res)!
				const page = result.pagination
				console.log('数据列表', result.items)
				if (!isNull(page)) {
					const pageDta = parse<UTSJSONObject>(page as Any)!
					render({
						list: result.items,
						pagination: {
							page: params["page"],
							size: params["size"],
							total: pageDta.total

						}

					});
				}

			}).catch(err => {
				ui.hideLoading()
				ui.showToast({
					message: (err as Response).message!,
				});
			})
		}




	});

	async function onPull() {
		await refresh({ page: 1 });
		listViewRef.value!.stopRefresh();
	}

	watch(current, (newVal : number, oldVal : number) => {
		if (newVal !== oldVal) {
			ui.showLoading(t("加载中"));
			refresh({ page: 1 });
		}


	})
	onReady(() => {
		ui.showLoading(t("加载中"));
		// 默认请求
		refresh({});

	});
</script>

<style>

</style>