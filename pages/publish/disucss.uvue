<template>
	<cl-page>
		<cl-topbar fixed :title="title" :show-back="false" safe-area-top :pt="{ className: 'px-5' }">
			<template #prepend>
				<cl-text>取消</cl-text>
			</template>

			<template #append>
				<cl-button :pt="{className:'px-4'}" size="small" rounded type='primary'
					@click="getContent">发布</cl-button>
			</template>
		</cl-topbar>
		<view class='px-2'>
			<view class="container h-[450rpx]">
				<web-view :src="webViewUrl" @message="onWebViewMessage" ref="webview" class="webview">
				</web-view>
			</view>
			<cl-upload v-model="urls" multiple :limit="3" @exceed="handleExceed"></cl-upload>
		</view>
		<view class="footer-container w-full h-[50px] px-5" :style="{bottom:inputBottom+'px'}">
			<view class="flex flex-row items-center">
				<cl-icon name="a-lujing387" size="30rpx" width="40rpx" height="40rpx" color="black"></cl-icon>
				<cl-icon name="a-zu342" color="black" height="40rpx" :pt="{className:'ml-3'}"></cl-icon>
			</view>
			<cl-icon name="baocun" color="black" height="40rpx"></cl-icon>
		</view>
	</cl-page>
</template>

<script setup>
	import { router, isNull } from "@/cool";
	import { type ClUploadItem, useUi } from "@/uni_modules/cool-ui";
	import { t } from "@/locale";
	const ui = useUi();
	const title = ref('')
	const urls = ref<string[]>([]);
	const inputBottom = ref(0)
	const isPubComment = ref(false)
	const closePopup = () => {
		uni.hideKeyboard()
		isPubComment.value = false
		inputBottom.value = 0
	}
	function handleExceed(list : ClUploadItem[]) {
		console.log("超出文件数量限制", list);
	}
	// 编辑器
	const webview = ref(null)
	// 假设你的 H5 页面放在 static 目录下，名为 editor.html
	const webViewUrl = ref('/static/editor/editor.html')
	const loading = ref(true)
	// 编辑器内容
	const editorContent = ref('')


	// 定义消息类型接口
	interface WebViewMessage {
		type : string;
		html ?: string;
		content ?: string;
		timestamp ?: number;
	}
	// 保存内容函数
	const saveContentToServer = (content : string) => {
		console.log('保存内容到服务器:', content.substring(0, 100) + '...')
		// 实际的上传逻辑
		ui.showToast({
			message: t("内容已保存"),
			type: 'success'
		});
	}

	// 类型安全的事件处理
	const onWebViewMessage = (event : UTSJSONObject) => {
		console.log('原始事件对象:', JSON.stringify(event))
		const detail = event['detail'] as UTSJSONObject
		console.log('detail 属性:', detail)
		// 类型安全检查
		if (isNull(detail) || isNull(detail['data'])) {
			console.error('Invalid WebView message structure')
			return
		}

		const dataArray = detail['data'] as Array<UTSJSONObject>
		if (dataArray.length === 0) {
			console.error('Empty message data')
			return
		}

		// 类型断言
		const message = dataArray[0] as WebViewMessage

		switch (message.type) {
			case 'editorReady':
				loading.value = false
				console.log('编辑器准备就绪')
				break

			case 'contentChange':
				if (!isNull(message.html) && message.html !== '') {
					editorContent.value = message.html as string
					console.log('内容已更新:', message.html as string)
					// 可以在这里更新响应式数据
				}
				break

			case 'saveContent':
				if (!isNull(message.html) && message.html !== '') {
					saveContentToServer(message.html as string)
				}
				break
			case 'contentResponse':
				if (!isNull(message.html) && message.html !== '') {
					editorContent.value = message.html as string
					// contentLength.value = message.text?.length || 0
					// showContent.value = true

					uni.showToast({
						title: '内容获取成功',
						icon: 'success'
					})
				}

				console.log('获取到编辑器内容:', editorContent.value)

			default:
				console.log('未知消息类型:', message.type)
		}
	}

	// 向 H5 发送消息的示例（类型安全版本）
	const sendMessageToH5 = () => {
		if (!isNull(webview.value)) {
			// 注意：传递内容时需要正确的转义
			const content = '<p>这是从 uni-app-x 设置的内容</p>'
			const jsCode = `window.setEditorContent && window.setEditorContent('${content.replace(/'/g, "\\'")}');`
			webview.value.evalJS(jsCode)
		}
	}
	// 发布
	const getContent = () => {
		if (!isNull(webview.value)) {
			console.log(webview.value,'获取postMessage方法')
			const message = {
				type: 'getContent'
			}
			// webview.value.postMessage(message)
			console.log('发送获取内容请求')
		} else {
			// ui.showToast({
			// 	title: '编辑器未就绪',
			// 	type: 'error'
			// })
		}
	}
	onMounted(() => {
		const params = router.params();
		if (!isNull(params)) {
			title.value = params.title as string
		}
		uni.onKeyboardHeightChange((res) => {
			if (res.height > 0) {
				inputBottom.value = res.height
				isPubComment.value = true
			} else {
				closePopup()
			}
		})

	})
</script>

<style>
	/* Footer 底部区域样式 */
	.footer-container {
		display: flex;
		flex-direction: row;
		align-items: center;
		justify-content: space-between;
		position: fixed;
		left: 0rpx;
		background: #F3F3F3
	}
</style>