<template>
	<cl-page>
		<view class="container">
			<!-- 背景图片 -->
			<cl-image class="background-image" width="100%" height="698rpx" src="../../static/image/homeHot-banner.png"
				mode="aspectFill"></cl-image>
			<!-- 页面内容 -->
			<view class="navabar">
				<cl-topbar safe-area-top color='white' background-color="transparent"> </cl-topbar>
				<cl-image class="m-auto" width="262rpx" height="76rpx" src="../../static/image/hot-title.png"
					mode="aspectFill"></cl-image>

			</view>
		</view>
		<view class="content bg-white">
			<cl-tabs v-model="current" :list="tagList" fill :showLine="false" :color="isColor ? '#2854F2' : ''"
				:un-color="isColor ? '#848484' : ''"></cl-tabs>
			<cl-list-view ref="listViewRef" :data="listView" :virtual="false" :pt="{
						refresher: {
							className: 'pt-3'
						}
					}" :refresher-enabled="true" @pull="onPull" @bottom="loadMore">
				<template #item="{ value, index }">
					<hot-article :value="value" :index="index" @item-click="onItemClick"></hot-article>
				</template>

				<template #bottom>
					<view class="py-3">
						<cl-loadmore :loading="loading" v-if="list.length > 0"></cl-loadmore>
					</view>
				</template>
			</cl-list-view>
		</view>
	</cl-page>



</template>

<script setup lang="ts">
	import { ref } from "vue"
	import { isMp, router, useRefs, usePager, parse, isArray, isNull } from "@/cool";
	import Tabbar from "@/components/tabbar.uvue";
	import { useUi } from "@/uni_modules/cool-ui";
	import hotArticle from "../homePage/components/hot-article.uvue";
	import type { ClTabsItem, ClListItem } from "@/uni_modules/cool-ui/types/index";
	import { t } from "@/locale";
	import { articles } from '@/cool/service/list'
	const ui = useUi();
	// 标签滑块模块
	const current = ref(0);
	const isColor = ref(true);
	const tagList = ref<ClTabsItem[]>([
		{
			label: "热门阅读",
			value: 0,
		},
		{
			label: "热门公司",
			value: 1,
		},
		{
			label: "活跃用户",
			value: 2,
		},
	]);
	const onItemClick = (item : UTSJSONObject) => {
		router.push({
			path: '/pages/articlePage/articleDetail',
			params: {
				articleId: item.id,
				title: '文章'
			}
		});
	};
	const listViewRef = ref<ClListViewComponentPublicInstance | null>(null);

	let id = 0;
	type pageList = {
		page : string
		size : string
		total : number
	}
	const { refresh, list, listView, loading, loadMore } = usePager((params, { render }) => {
		articles({
			page: params["page"],
			per_page: params["size"],
			status: "published",
			sort: "popular",
		}).then(res => {
			ui.hideLoading()
			if (res != null) {
				const result = parse<UTSJSONObject>(res)!
				render({
					list: result.data,
					pagination: {
						page: params["page"],
						size: params["size"],
						total: result.total

					}

				});


			}

		})

	});
	async function onPull() {
		await refresh({ page: 1 });
		listViewRef.value!.stopRefresh();
	}

	onReady(() => {
		ui.showLoading(t("加载中"));
		// 默认请求
		refresh({});
	});
	onMounted(() => {
		const params = router.params();
		console.log(params, '获取数据')
		current.value = params.index as number
	})
</script>

<style>
	.container {
		position: relative;
		width: 100%;
		height: 698rpx;
	}

	.background-image {
		position: absolute;
		top: 0;
		left: 0;
		z-index: 1;
		/* 背景图片在底层 */
	}

	.navabar {
		position: relative;
		z-index: 2;
		/* 确保导航栏在背景图片之上 */
	}

	.content {
		width: 100%;
		position: absolute;
		z-index: 3;
		top: 400rpx;
		bottom: 0;
		/* 使用绝对定位替代calc()函数 - 占据从400rpx到屏幕底部的剩余高度 */
		display: flex;
		flex-direction: column;
	}

	.hot-reading-list {
		flex: 1;
		height: 100%;
		overflow: hidden;
	}

	.safe-area-bottom {
		padding-bottom: env(safe-area-inset-bottom);
		min-height: 60rpx;
	}
</style>