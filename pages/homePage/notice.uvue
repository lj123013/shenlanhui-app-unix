<template>
	<cl-page>
		<cl-list-view ref="listViewRef" :data="listView" :virtual="false" :pt="{
					refresher: {
						className: 'pt-3'
					}
				}" :refresher-enabled="true" @pull="onPull" @bottom="loadMore">
			<template #item="{ value ,index}">
				<notice-item :value="value" :index="index" @item-click="onItemClick"></notice-item>
			</template>

			<template #bottom>
				<view class="py-3">
					<cl-loadmore :loading="loading" :finish="finished" v-if="list.length > 0"></cl-loadmore>
				</view>
			</template>
		</cl-list-view>
	</cl-page>
</template>

<script lang="ts" setup>
	import { ref } from "vue";
	import { usePager, router, parse, isNull } from "@/cool";
	import type { ClTabsItem, useUi } from "@/uni_modules/cool-ui";
	import noticeItem from "../homePage/components/notice-item.uvue";
	import { announcements } from '@/cool/service/list'
	import { t } from "@/locale";
	const ui = useUi();
	const listViewRef = ref<ClListViewComponentPublicInstance | null>(null);
	const onItemClick = (item : UTSJSONObject) => {
		console.log('点击文章项:', item?.pdf);
		const url = item?.pdf as UTSJSONObject
		const itemUrl = url.getString('proxy_url')
		if (itemUrl!!.startsWith('https')) {
			uni.showLoading({
				title: '下载中',
				mask: true
			})
			uni.downloadFile({
				url: itemUrl as string,
				success: (res) => {
					uni.openDocument({
						filePath: res.tempFilePath,

						success: () => {
							uni.hideLoading()
							console.log('打开文档成功')
						},
						fail: (err) => {
							uni.hideLoading()
							console.log('打开文档失败', err)
							uni.showToast({
								title: '错误码：' + err.errCode.toString(),
								icon: "error"
							})
						}
					})
				},
				fail: (err) => {
					uni.hideLoading()
					console.log('下载失败', err)
					uni.showToast({
						title: '下载失败：' + err.errCode.toString(),
						icon: "error"
					})
				}
			})
		} else {
			uni.openDocument({
				filePath: itemUrl,
				success: () => {
					console.log('打开文档成功')
				},
				fail: (err) => {
					console.log('打开文档失败', err)
					uni.showToast({
						title: '错误码：' + err.errCode.toString(),
						icon: "error"
					})
				}
			})
		}
	};
	const { refresh, list, listView, loading, loadMore, finished } = usePager((params, { render }) => {
		announcements({
			page: params["page"],
			per_page: params["size"],

		}).then(res => {
			ui.hideLoading();
			const result = parse<UTSJSONObject>(res)!
			const page = result.pagination
			console.log('数据列表', params["page"], result.items)
			if (!isNull(page)) {
				const pageDta = parse<UTSJSONObject>(page as Any)!
				render({
					list: result.items,
					pagination: {
						page: params["page"],
						size: params["size"],
						total: pageDta.total

					}

				});
			}
		}).catch(err => {
			ui.hideLoading()
			ui.showToast({
				message: (err as Response).message!,
			});
		})
	});


	async function onPull() {
		await refresh({ page: 1 });
		listViewRef.value!.stopRefresh();
	}

	onReady(() => {
		ui.showLoading(t("加载中"));
		// 默认请求
		refresh({});
	});
</script>