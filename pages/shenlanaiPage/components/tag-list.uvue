<template>
	<scroll-view class="scroll-view_H pt-3" direction="horizontal" :show-scrollbar="false">
		<view v-for="(item, index) in taglist" @click="clickItem(item)"
			:class="[
				'scroll-user-item flex flex-row items-center justify-center px-3 py-1 mr-4 rounded-lg',
				props.mode === 'select' ? 
					(selectedItem === item.name ? 'activeBorder' : 'bordergray') : 
					'bordergray'
			]">
			<view class='p-1 rounded-[10rpx] mr-1 flex flex-col items-center justify-center'
				:style="{ background: item.iconBg }">
				<cl-icon :name="item.icon" size='20rpx' color='white'></cl-icon>
			</view>
			<cl-text :pt="{ className: '!text-base' }">{{ item?.name }}</cl-text>
		</view>
	</scroll-view>
</template>

<script setup>
import { isMp, router, useRefs, isNull, storage } from "@/cool";
import { ref, onMounted } from "vue"
import { useStore } from "@/cool";
const props = defineProps({
	delet: {
		type: String,
		default: ''
	},
	// 新增模式属性：'nav'为导航模式（跳转），'select'为选择模式（激活）
	mode: {
		type: String,
		default: 'nav'
	}
})
const { app } = useStore();
// 添加选中状态
const selectedItem = ref<string>('');
type altag = {
	icon: string
	name: string
	iconBg: string
}
const taglist = ref < altag[] > ([
	{
		icon: "nav_1",
		name: "深蓝智能体",
		iconBg: "#F93939"
	}, {
		icon: "nav_1",
		name: "财经智能写作",
		iconBg: "#3AD6A7"
	},
	{
		icon: "a-zu39",
		name: "AI翻译",
		iconBg: '#FF24CC',
	}, {
		icon: "a-zu372",
		name: "改写快讯",
		iconBg: '#5127FF',
	}, {
		icon: "a-zu41",
		name: "AI生图",
		iconBg: '#3AA1D6',
	}, {
		icon: "yuyin",
		name: "录音转文字",
		iconBg: '#65CC0C',
	}, {
		icon: "a-zu367",
		name: "生成口播文案",
		iconBg: '#FF8000',
	}, {
		icon: "a-zu48",
		name: "新闻通稿改写",
		iconBg: '#0008FF',
	}])
const clickItem = (item: altag) => {
	if (props.mode === 'nav') {
		// 导航模式：跳转页面
		if (item.name == '深蓝智能体') {
			router.to("/pages/shenlanaiPage/intelligent");
		} else {
			// 将选中的AI工具名称存储到store中
			app.setSelectedAiTool(item.name);
			console.log('已存储到store:', item.name);
			router.to("/pages/shenlanaiPage/chart");
		}
	} else if (props.mode === 'select') {
		// 选择模式：激活状态，不跳转
		console.log('选择模式 - 点击项目:', item.name);
		selectedItem.value = item.name;
		// 将选中的AI工具名称存储到store中
		app.setSelectedAiTool(item.name);
		console.log('选中标签:', item.name);
		console.log('store中的值已更新为:', app.selectedAiTool.value);
		console.log('本地存储值:', storage.get('selectedAiTool'));
	}
}
onMounted(() => {
	if (!isNull(props.delet)) {
		console.log("有值");
		const index = taglist.value.findIndex((item) => item.name === props.delet);
		if (index !== -1) {
			taglist.value.splice(index, 1);
		}
	}
	
	// 如果是选择模式，从 store 中获取当前选中的项
	if (props.mode === 'select') {
		selectedItem.value = app.selectedAiTool.value;
		console.log('初始化选择模式 - store中的值:', app.selectedAiTool.value);
		console.log('初始化选择模式 - 选中项:', selectedItem.value);
	}
})
</script>

<style>
.scroll-view_H {
	width: 100%;
	flex-direction: row;
}

.bordergray {
	border: 2rpx solid #ECECEC;
}

.activeBorder {
	border: 2rpx solid #2854F2;
	background-color: #f0f4ff;
}
</style>