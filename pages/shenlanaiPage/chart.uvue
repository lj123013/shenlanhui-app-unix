<template>
	<cl-page>
		<view class="px-5">
			<tagList delet='深蓝智能体' class="mb-4"></tagList>
			<view v-for="(item, index) in tlabel" :key="index" >
				<view v-if="item?.type == title">
					<cl-text color="#777777">{{ item?.title }}:</cl-text>
					<view class="flex flex-wrap flex-row mt-4 borderf pb-4 mb-4">
						<cl-tag v-for="(child, childindex) in item?.list" :key="childindex" class="mb-2 mr-4 backgrou4a"
							@click="setMaxlength(item,child.text)"
							:pt="{
								text: {
									className: '!text-gray-700'
								}
							}">{{t(child['text'] as string)  }}</cl-tag>
					</view>
				</view>
			</view>
			<cl-textarea
				:autofocus="true"
				height="245rpx"
				show-word-limit
				:border="false"
				:maxlength="maxlength"
				placeholder="请输入您的需求"
				class="backgrou4a"
				:pt="{
					inner: {
						className: '!text-sky-700'
					}
				}"
			></cl-textarea>
			<cl-button @tap="submit" size="large" rounded :pt="{ className: 'mt-5' }">{{
				t("开始写作")
			}}</cl-button>
		</view>
	</cl-page>
</template>

<script setup>
	import { onMounted, ref,computed } from "vue";
	import { t } from "@/locale";
	import { isMp, router, useRefs, isNull, useStore } from "@/cool";
	import { useUi, } from "@/uni_modules/cool-ui";
	import tagList from "../shenlanaiPage/components/tag-list.uvue"
	const title = ref<string>("")
	const { app } = useStore();
	const maxlength = ref(500);
	
	type child={
		text:string
	}
	type tagItem = {
		title : string
		type : string
		list ?: child[];
	}
	
	const tlabel = ref<tagItem[]>([
		{
			title: '风格选取',
			type: '财经智能写作',
			list: [
				{ text: "党报" },
				{ text: "彭博社" },
				{ text: "华尔街日报" },
				{ text: "每日经济新闻" },
				{ text: "智谷趋势" },
				{ text: "深蓝财经" }
			]
		},
		{
			title: '最大字数',
			type: '财经智能写作',
			list: [
				{ text: "不限制" },
				{ text: "150" },
				{ text: "300" },
				{ text: "400" },
				{ text: "450" },
				{ text: "500" },
				{ text: "600" },
			]
		},
		{
			title: '正面标签',
			type: 'AI生图',
			list: [
				{ text: "高清" },
				{ text: "写实风格" },
				{ text: "自然光线" },
				{ text: "细节丰富" },
				{ text: "动态构图" },
				{ text: "柔和颜色" },
				{ text: "明亮" },
				{ text: "唯美" },
			]
		},
		{
			title: '负面标签',
			type: 'AI生图',
			list: [
				{ text: "模糊" },
				{ text: "畸形" },
				{ text: "扭曲" },
				{ text: "低质量" },
				{ text: "水印" },
				{ text: "过度曝光" },
				{ text: "噪点" },
			]
		},
		{
			title: '核心目标',
			type: '生成口播文案',
			list: [
				{ text: "品牌导向" },
				{ text: "效果导向" },
				{ text: "互动导向" },
				{ text: "内容导向" },
			]
		},
		{
			title: '语言风格',
			type: '生成口播文案',
			list: [
				{ text: "正式感 " },
				{ text: "随意感" },
				{ text: "理性感" },
				{ text: "活泼感" },
				{ text: "沉稳感" },
			]
		},
		{
			title: '角度与立意',
			type: '新闻通稿改写',
			list: [
				{ text: "行业视角" },
				{ text: "大众视角" },
				{ text: "企业视角" },
				{ text: "用户视角" },
				{ text: "产品视角" },
				{ text: "故事/人物视角" },
			]
		},
		{
			title: '结构与逻辑',
			type: '新闻通稿改写',
			list: [
				{ text: "倒金字塔结构" },
				{ text: "黄金圈法则" },
			]
		},
	]);
	const setMaxlength = (item : tagItem,val:string) => {
		if(!isNull(item)){
			if(item.title=='最大字数'){
				if (val == "不限制") {
					maxlength.value = 9999;
				} else {
					const num = parseInt(val);
					// 检查转换结果是否有效
					maxlength.value = isNaN(num) ? 0 : num;
				}
			}
		}
	};
	const submit = () => {
		uni.showToast({
			title: "功能开发中，敬请期待",
			icon: "none"
		});
	};
	onMounted(() => {
		// 从 store 中获取选中的AI工具名称
		title.value = app.selectedAiTool.value;
		console.log('从 store 获取的标题:', title.value);
	})
</script>
<style>
	.cl-tag {
		margin-left: 0rpx !important;
	}

	.borderf {
		border-bottom: 2rpx solid #f1f1f1;
	}

	.backgrou4a {
		background-color: #f9f9f9;
	}

	.menuBox {
		position: relative;
	}

	.menuList {
		border: 2rpx solid #f3f3f3;
		background-color: #fff;
		position: absolute;
		top: 620rpx;
		left: 60rpx;
		z-index: 999;
	}

	.menuList2 {
		border: 2rpx solid #f3f3f3;
		background-color: #fff;
		position: absolute;
		top: 620rpx;
		right: 60rpx;
		z-index: 999;
	}
</style>