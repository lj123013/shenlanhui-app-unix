<template>
	<slot :disabled="isDisabled" :countdown="countdown" :btnText="btnText">
		<cl-button text :disabled="isDisabled" @tap="send">
			{{ btnText }}
		</cl-button>
	</slot>
</template>

<script lang="ts" setup>
	import { computed, reactive, ref } from "vue";
	import { useUi } from "@/uni_modules/cool-ui";
	import { $t, t } from "@/locale";
	import { isDark, parse, request, type Response } from "@/cool";
	import { smsSend } from "@/cool/service/user"
	const props = defineProps({
		phone: String
	});

	const emit = defineEmits(["success"]);

	const popupRef = ref<ClPopupComponentPublicInstance | null>(null);

	const ui = useUi();

	type Captcha = {
		visible : boolean;
		loading : boolean;
		sending : boolean;
		img : string;
	};

	// 验证码
	const captcha = reactive<Captcha>({
		visible: false,
		loading: false,
		sending: false,
		img: ""
	});

	// 倒计时
	const countdown = ref(0);

	// 是否禁用
	const isDisabled = computed(() => countdown.value > 0 || props.phone == "");

	// 按钮文案
	const btnText = computed(() =>
		countdown.value > 0 ? $t("{n}s后重新获取", { n: countdown.value }) : t("获取验证码")
	);

	const code = ref("");
	const captchaId = ref("");
	// 开始倒计时
	function startCountdown() {
		countdown.value = 60;
		let timer : number = 0;

		function fn() {
			countdown.value--;

			if (countdown.value < 1) {
				clearInterval(timer);
			}
		}

		// @ts-ignore
		timer = setInterval(() => {
			fn();
		}, 1000);
		fn();
	}
	// 发送短信
	const send = async () => {
		if (props.phone != "") {
			if (/^(?:(?:\+|00)86)?1[3-9]\d{9}$/.test(props.phone!)) {
				captcha.visible = true;
				smsSend({
					mobile: props.phone,
					type: "login"
				}).then((res) => {
					// 打印后端返回的成功响应
					console.log("短信发送成功，后端返回值:", res);
					ui.showToast({
						message: t("短信已发送，请查收")
					})
					startCountdown();
					emit("success");
				})
				// await request({
				// 	url: "/api/v2/sms/send",
				// 	method: "POST",
				// 	data: {
				// 		mobile: props.phone,
				// 		type: "login"
				// 	}
				// })
				// 	.then((res) => {
				// 		// 打印后端返回的成功响应
				// 		console.log("短信发送成功，后端返回值:", res);
				// 		ui.showToast({
				// 			message: t("短信已发送，请查收")
				// 		});
				// 		startCountdown();
				// 		emit("success");
				// 	})

				// 	.catch((err) => {
				// 		// 打印后端返回的错误信息
				// 		console.log("短信发送失败，错误信息:", err);
				// 		// ui.showToast({
				// 		//   message: (err as Response).message! // 强行转换导致报错
				// 		// });

				// 		// 优化后代码
				// 		console.log("短信发送失败，错误信息:", err);
				// 		// 兼容不同错误类型，优先取错误信息
				// 		let errorMsg = "发送失败，请稍后重试";
				// 		if (typeof err === 'object') {
				// 			// 尝试获取后端返回的message（适用于正常响应的错误）
				// 			// if ('message' in err) {
				// 			//   errorMsg = String(err.message);
				// 			// } else if (err instanceof Error) {
				// 			//   // 捕获JavaScript原生错误
				// 			//   errorMsg = err.message;
				// 			// }
				// 		} else if (typeof err === 'string') {
				// 			// 字符串类型错误
				// 			errorMsg = err;
				// 		}
				// 		ui.showToast({
				// 			message: errorMsg
				// 		});
				// 	});
				captcha.sending = false;
			} else {
				ui.showToast({
					message: t("请填写正确的手机号格式")
				});
			}
		}
	}
	defineExpose({
		send,
		startCountdown
	});
</script>