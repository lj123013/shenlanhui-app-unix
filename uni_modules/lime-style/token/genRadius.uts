export function genRadius(radiusBase : number):Map<string, number> {
	let radiusXL = radiusBase;
	let radiusLG = radiusBase;
	let radiusMD = radiusBase;
	let radiusSM = radiusBase;
	let radiusXS = radiusBase;
	let radiusOuter = radiusBase;
	
	
	// radiusSM = radiusBase - 3
	// radiusXS = radiusSM - 1
	// radiusLG = radiusBase + 3
	// radiusXL = radiusLG + 3

	
	// radiusXL
	if (radiusBase < 6 && radiusBase >= 5) {
		radiusXL = radiusBase + 3;
	} else if (radiusBase < 16 && radiusBase >= 6) {
		radiusXL = radiusBase + 6;
	} else if (radiusBase >= 16) {
		radiusXL = 16;
	}
	
	// radiusLG
	if (radiusBase < 6 && radiusBase >= 5) {
		radiusLG = radiusBase + 1;
	} else if (radiusBase < 16 && radiusBase >= 6) {
		radiusLG = radiusBase + 3;
	} else if (radiusBase >= 16) {
		radiusLG = 16;
	}

	// radiusSM
	if (radiusBase < 7 && radiusBase >= 5) {
		radiusSM = 3;
	} else if (radiusBase < 8 && radiusBase >= 7) {
		radiusSM = 4;
	} else if (radiusBase < 14 && radiusBase >= 8) {
		radiusSM = 5;
	} else if (radiusBase < 16 && radiusBase >= 14) {
		radiusSM = 6;
	} else if (radiusBase >= 16) {
		radiusSM = 8;
	}

	// radiusXS
	if (radiusBase < 6 && radiusBase >= 2) {
		radiusXS = 1;
	} else if (radiusBase >= 6) {
		radiusXS = 2;
	}

	
	return new Map<string, number>([
		['borderRadius', radiusBase],
		['borderRadiusXS', radiusXS],
		['borderRadiusSM', radiusSM],
		['borderRadiusMD', radiusMD],
		['borderRadiusLG', radiusLG],
		['borderRadiusXL', radiusXL],
	])
}