<template>
	<view class="demo-block">
		<text class="demo-block__title-text ultra">监听元素尺寸</text>
		<text class="demo-block__desc-text">可以监听元素尺寸的变化</text>	
		<view class="demo-block__body">
			<view class="demo-block">
				<text class="demo-block__title-text large">监听父级</text>
				<view class="demo-block__body">
					
					<view class="parent" :style="[pStyles]">
						<l-resize @resize="handleResize0"></l-resize>
					</view>
					<button style="margin-top:10px" @click="onclick('parent')">变变</button>
					
				</view>	
			</view>	
			
			<view class="demo-block">
				<text class="demo-block__title-text large">监听子级</text>
				<view class="demo-block__body">
					
					<l-resize @resize="handleResize1">
						<view class="child" :style="[cStyles]"></view>
					</l-resize>
					<button style="margin-top:10px" @click="onclick('child')">变变</button>
					
					
				</view>	
			</view>	
			
		</view>	
	</view>
</template>
<script>
	type ResizeResult = {
		bottom : number;
		top : number;
		left : number;
		right : number;
		height : number;
		width : number;
	}
	export default {
		data() {
			return {
				scrollTop: 0,
				parent: {
					width: 100,
					height: 100
				},
				child: {
					width: 100,
					height: 100
				}
			}
		},
		computed: {
			pStyles() : string {
				return `background-color: yellowgreen; width: ${this.parent['width']}px; height: ${this.parent['height']}px`
			},
			cStyles() : string {
				return `background-color: #4d80f0; width: ${this.child['width']}px; height: ${this.child['height']}px`
			}
		},
		methods: {
			scroll() {
				console.log('~scroll')
			},
			handleResize0(size : DOMRect) {
				console.log('sieze', size, 'parent')
			},
			handleResize1(size : DOMRect) {
				console.log('sieze', size, 'child')
			},
			onclick(type : string) {
				console.log('type', type)
				const target = type =='parent' ? this.parent: this.child
				setTimeout(() => {
					this.scrollTop = 200
					target['width'] = 200
					target['height'] = 200
				}, 1000)
				setTimeout(() => {
					target['width'] = 300
					target['height'] = 300
				}, 2500)
				setTimeout(() => {
					target['width'] = 100
					target['height'] = 100
				}, 4000)
				setTimeout(() => {
					target['width'] = 150
					target['height'] = 150
				}, 5000)
			}
		}
	}
</script>
<style lang="scss">
	$card-bg-color: var(--doc-card-bg-color, white);
	// $page-bg-color: var(--doc-page-bg-color, #f5f5f5);
	$title-color: var(--doc-title-color, #000000E6);
	$summary-color: var(--doc-summary-color, #00000099);
	
	.parent {
		position: relative;
		background-color: yellowgreen;
	}

	.child {
		/* // #4d80f0 */
		background-color: rgba(0, 0, 0, 0.1);
	}
	.row {
		flex-direction: row;
		flex-wrap: wrap;
	}
	
	.custom-radio {
		padding: 20rpx 30rpx;
		border-radius: 5rpx;
		border: 1rpx solid #ddd;
		transition: background-color 0.3s;
		color: black;
	
		&.checked {
			background-color: #007aff;
			color: white;
			border-color: #007aff;
		}
	}
	
	.demo-block {
		margin: 32px 10px 0;
	
		// overflow: visible;
		&.card {
			background-color: $card-bg-color;
			transition-property: background-color;
			// transition-duration: 300ms;
			padding: 30rpx;
			margin-bottom: 20rpx !important;
		}
	
		&__title {
			margin: 0;
			margin-top: 8px;
	
			&-text {
				color: $summary-color;
				font-weight: 400;
				font-size: 14px;
				line-height: 16px;
	
				&.large {
					color: $title-color;
					font-size: 18px;
					font-weight: 700;
					line-height: 26px;
				}
	
				&.ultra {
					color: $title-color;
					font-size: 24px;
					font-weight: 700;
					line-height: 32px;
				}
			}
		}
	
		&__desc-text {
			color: $summary-color;
			margin: 8px 16px 0 0;
			font-size: 14px;
			line-height: 22px;
		}
	
		&__body {
			margin: 16px 0;
			overflow: visible;
	
			.demo-block {
				// margin-top: 0px;
				margin: 0;
			}
		}
	}
</style>